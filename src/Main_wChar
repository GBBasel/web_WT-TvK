module Main exposing (..)

import Browser
import String exposing (fromChar)
import Html.Attributes exposing (style)
import Html.Events exposing (..)
import Html exposing (Html, button, div, p, table, td, text, tr)
import Random exposing (int)

-- MODEL

type alias Model = 
    { difficulty : Int
    , pattern : List Char }

initialModel : Model
initialModel =
    { difficulty = 8
    , pattern = []}
    

init : () -> (Model, Cmd Msg)
init _ =
  ( initialModel
  , Cmd.none
  )

-- UPDATE

type Msg
    = Roll
    | GenerateNumber (List Int)
    | IncreaseDifficulty
    


update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
  case msg of
    Roll ->
      ( model
      , Random.generate GenerateNumber (Random.list model.difficulty ( Random.int 33 125))
      )
    GenerateNumber newpattern ->
     ( { model | pattern = (List.map Char.fromCode newpattern) }, Cmd.none)
    IncreaseDifficulty ->
     ( { model | difficulty = model.difficulty + 1}, Cmd.none)
    

-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
  Sub.none


-- VIEW

view : Model -> Html Msg
view model =
    div []
        [ text "Merke dir das folgende Muster:"
        , p [] []
        , text <| String.join "" <| List.map String.fromChar model.pattern
        , p [] []
        , button [ onClick Roll ] [ text "Roll" ]
        ]

-- MAIN
main : Program () Model Msg
main =
    Browser.element
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }
